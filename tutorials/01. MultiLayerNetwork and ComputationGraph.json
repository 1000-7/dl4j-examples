{
  "paragraphs": [
    {
      "text": "%md\n### Note\n\nView the README.md [here](https://github.com/deeplearning4j/dl4j-examples/tree/overhaul_tutorials/tutorials/README.md) to learn about installing, setting up dependencies and importing notebooks in Zeppelin",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:38:35 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eNote\u003c/h3\u003e\n\u003cp\u003eView the README.md \u003ca href\u003d\"https://github.com/deeplearning4j/dl4j-examples/tree/overhaul_tutorials/tutorials/README.md\"\u003ehere\u003c/a\u003e to learn about installing, setting up dependencies and importing notebooks in Zeppelin\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507778634015_85380173",
      "id": "20171012-032354_1839085744",
      "dateCreated": "Oct 12, 2017 3:23:54 AM",
      "dateStarted": "Oct 12, 2017 3:38:35 AM",
      "dateFinished": "Oct 12, 2017 3:38:35 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.dep\n\n// clean up any previously loaded dependencies\nz.reset()\n\n// now load ND4J for CPU, our native tensor computing library\nz.load(\"org.nd4j:nd4j-native-platform:0.9.1\")\n\n// alternatively if you have a CUDA-enabled GPU, you can load ND4J for CUDA\n// z.load(\"org.nd4j:nd4j-cuda-8.0-platform:0.9.1\")\n\n// finally, load the core deeplearning4j library with all basic features\nz.load(\"org.deeplearning4j:deeplearning4j-core:0.9.1\")\n\n// don\u0027t forget to type Shift-Enter to run!",
      "user": "anonymous",
      "dateUpdated": "Oct 8, 2017 3:52:07 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res0: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@2ac46bba\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816531_2023061849",
      "id": "20171008-045754_932013532",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:52:03 PM",
      "dateFinished": "Oct 8, 2017 3:52:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "MultiLayerNetwork And ComputationGraph",
      "text": "%md\n## DL4j Network Architectures\n\nDL4j provides the following network architectures:\n1. \u0027MultiLayerNetwork\u0027\n2. \u0027ComputationGraph\u0027\n\n\n### 1. MultiLayerNetwork\n\u0027MultiLayerNetwork\u0027 consists of a single input layer and a single output layer with a stack of layers in between them.\n\n### 2. ComputationGraph\n\u0027ComputationGraph\u0027 is used for constructing networks with a more complex architecture than \u0027MultiLayerNetwork\u0027. \nIt can have multiple input layers, multiple output layers and the layers in between can be connected through a direct acyclic graph.",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:39:01 AM",
      "config": {
        "lineNumbers": false,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDL4j Network Architectures\u003c/h2\u003e\n\u003cp\u003eDL4j provides the following network architectures:\u003cbr/\u003e1. \u0026lsquo;MultiLayerNetwork\u0026rsquo;\u003cbr/\u003e2. \u0026lsquo;ComputationGraph\u0026rsquo;\u003c/p\u003e\n\u003ch3\u003e1. MultiLayerNetwork\u003c/h3\u003e\n\u003cp\u003e\u0026lsquo;MultiLayerNetwork\u0026rsquo; consists of a single input layer and a single output layer with a stack of layers in between them.\u003c/p\u003e\n\u003ch3\u003e2. ComputationGraph\u003c/h3\u003e\n\u003cp\u003e\u0026lsquo;ComputationGraph\u0026rsquo; is used for constructing networks with a more complex architecture than \u0026lsquo;MultiLayerNetwork\u0026rsquo;.\u003cbr/\u003eIt can have multiple input layers, multiple output layers and the layers in between can be connected through a direct acyclic graph.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816540_2018060113",
      "id": "20171004-170427_1364811928",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:32:50 AM",
      "dateFinished": "Oct 12, 2017 3:32:50 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md \n### Network Configurations\nWhether you create \u0027MultiLayerNetwork\u0027 or \u0027ComputationGraph\u0027, you have to provide a network configuration to it through \u0027NeuralNetConfiguration.Builder\u0027.\n\u0027NeuralNetConfiguration.Builder\u0027, as the name tells, provides a Builder pattern to configure a network architecture.\nFor Creating \u0027MultiLayerNetwork\u0027 we build a \u0027MultiLayerConfiguraion\u0027 and for \u0027ComputationGraph\u0027 it\u0027s \u0027ComputationGraphConfiguration\u0027\n\nThe pattern goes like this: [High Level Configuration] -\u003e [Configure Layers] -\u003e [Pretraining and Backprop Configuration] -\u003e [Build Configuration]",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:51:29 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eNetwork Configurations\u003c/h3\u003e\n\u003cp\u003eWhether you create \u0026lsquo;MultiLayerNetwork\u0026rsquo; or \u0026lsquo;ComputationGraph\u0026rsquo;, you have to provide a network configuration to it through \u0026lsquo;NeuralNetConfiguration.Builder\u0026rsquo;.\u003cbr/\u003e\u0026lsquo;NeuralNetConfiguration.Builder\u0026rsquo;, as the name tells, provides a Builder pattern to configure a network architecture.\u003cbr/\u003eFor Creating \u0026lsquo;MultiLayerNetwork\u0026rsquo; we build a \u0026lsquo;MultiLayerConfiguraion\u0026rsquo; and for \u0026lsquo;ComputationGraph\u0026rsquo; it\u0026rsquo;s \u0026lsquo;ComputationGraphConfiguration\u0026rsquo;\u003c/p\u003e\n\u003cp\u003eThe pattern goes like this: [High Level Configuration] -\u0026gt; [Configure Layers] -\u0026gt; [Pretraining and Backprop Configuration] -\u0026gt; [Build Configuration]\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816541_2017675364",
      "id": "20171004-235339_793867740",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:51:25 AM",
      "dateFinished": "Oct 12, 2017 3:51:25 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Required imports",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:39:19 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eRequired imports\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779548359_1878232306",
      "id": "20171012-033908_1315178710",
      "dateCreated": "Oct 12, 2017 3:39:08 AM",
      "dateStarted": "Oct 12, 2017 3:39:19 AM",
      "dateFinished": "Oct 12, 2017 3:39:19 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%spark\r\n\r\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\r\nimport org.deeplearning4j.nn.conf.graph.MergeVertex\r\nimport org.deeplearning4j.nn.conf.layers.{DenseLayer, GravesLSTM, OutputLayer, RnnOutputLayer}\r\nimport org.deeplearning4j.nn.conf.{ComputationGraphConfiguration, MultiLayerConfiguration, NeuralNetConfiguration}\r\nimport org.deeplearning4j.nn.graph.ComputationGraph\r\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\r\nimport org.deeplearning4j.nn.weights.WeightInit\r\nimport org.nd4j.linalg.activations.Activation\r\nimport org.nd4j.linalg.learning.config.Nesterovs\r\nimport org.nd4j.linalg.lossfunctions.LossFunctions",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:39:47 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.graph.MergeVertex\nimport org.deeplearning4j.nn.conf.layers.{DenseLayer, GravesLSTM, OutputLayer, RnnOutputLayer}\nimport org.deeplearning4j.nn.conf.{ComputationGraphConfiguration, MultiLayerConfiguration, NeuralNetConfiguration}\nimport org.deeplearning4j.nn.graph.ComputationGraph\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.learning.config.Nesterovs\nimport org.nd4j.linalg.lossfunctions.LossFunctions\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816541_2017675364",
      "id": "20171005-000419_678819715",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:53:06 PM",
      "dateFinished": "Oct 8, 2017 3:53:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Building a MultiLayerConfiguration",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:40:09 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eBuilding a MultiLayerConfiguration\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779591464_-148578928",
      "id": "20171012-033951_284959928",
      "dateCreated": "Oct 12, 2017 3:39:51 AM",
      "dateStarted": "Oct 12, 2017 3:40:09 AM",
      "dateFinished": "Oct 12, 2017 3:40:09 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "val multiLayerConf: MultiLayerConfiguration \u003d new NeuralNetConfiguration.Builder()\r\n  .seed(123).learningRate(0.1).iterations(1).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new Nesterovs(0.9)) //High Level Configuration\r\n  .list() //For configuring MultiLayerNetwork we call the list method\r\n  .layer(0, new DenseLayer.Builder().nIn(784).nOut(100).weightInit(WeightInit.XAVIER).activation(Activation.RELU).build()) //Configuring Layers\r\n  .layer(1, new OutputLayer.Builder().nIn(100).nOut(10).weightInit(WeightInit.XAVIER).activation(Activation.SIGMOID).build())\r\n  .pretrain(false).backprop(true) //Pretraining and Backprop Configuration\r\n  .build() //Building Configuration",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:40:19 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "multiLayerConf: org.deeplearning4j.nn.conf.MultiLayerConfiguration \u003d\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"dense\" : {\n        \"activationFn\" : {\n          \"ReLU\" : { }\n        },\n        \"adamMeanDecay\" : \"NaN\",\n        \"adamVarDecay\" : \"NaN\",\n        \"biasInit\" : 0.0,\n        \"biasLearningRate\" : 0.1,\n        \"dist\" : null,\n        \"dropOut\" : 0.0,\n        \"epsilon\" : \"NaN\",\n        \"gradientNormalization\" : \"None\",\n        \"gradientNormalizationThreshold\" : 1.0,\n        \"iupdater\" : {\n          \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n          \"learningRate\" : 0.1,\n          \"momentum\" : 0.9\n   ..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816541_2017675364",
      "id": "20171005-001318_1291178273",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:53:14 PM",
      "dateFinished": "Oct 8, 2017 3:53:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n\n### What we did here?",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:40:34 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWhat we did here?\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779622457_-2058610385",
      "id": "20171012-034022_1645534314",
      "dateCreated": "Oct 12, 2017 3:40:22 AM",
      "dateStarted": "Oct 12, 2017 3:40:34 AM",
      "dateFinished": "Oct 12, 2017 3:40:34 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md \r\n\r\n**- High Level Configuration**\r\n\r\nFunction         | Details\r\n---------------- | -------------\r\nseed             | For keeping the network outputs reproducable during runs by initializing weights and other network randomizations through a seed\r\nlearningRate     | For identifying the network learning rate\r\niterations       | For identifying the number of optimization iterations\r\noptimizationAlgo | Optimization Algorithm to use for training. Run \u0027OptimizationAlgorithm.values().foreach { println }\u0027 to see different optimization algorithms that you can use.\r\nupdater          | Algorithm to be used for updating the parameters\r\n\r\n---\r\n**- Configuration of Layers**\r\n\r\nHere we are calling list() to get the \u0027ListBuilder\u0027. It provides us the necessary api to add layers to the network through the \u0027layer(arg1, arg2)\u0027 function.\r\n- The first parameter is the index of the position where the layer needs to be added.\r\n- The second parameter is the type of layer we need to add to the network.\r\n\r\nTo build and add a layer we use a similar builder pattern as:\r\n\r\nFunction         | Details\r\n---------------- | -------------\r\nnIn              | The number of inputs coming from the previous layer. (In the first layer, it represents the input it is going to take from the input layer)\r\nnOut             | The number of outputs it\u0027s going to send to the next layer. (For output layer it represents the labels here)\r\nweightInit       | The type of weights initialization to use for the layer parameters. Run \u0027WeightInit.values().foreach { println }\u0027 to see different weight initializations that you can use.\r\nactivation       | The activation function between layers. Run \u0027Activation.values().foreach { println }\u0027 to see different activations that you can use.\r\n\r\n---\r\n**- Pretraining and Backprop Configuration**\r\n\r\nFunction         | Details\r\n---------------- | -------------\r\npretrain         | False if training from scratch\r\nbackprop         | Whether to backprop or not\r\n\r\n---\r\n**- Building a Graph**\r\n\r\nFinally, the last build() call builds the configuration for us\r\n",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 4:31:22 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003e- High Level Configuration\u003c/strong\u003e\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eFunction \u003c/th\u003e\n      \u003cth\u003eDetails\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eseed \u003c/td\u003e\n      \u003ctd\u003eFor keeping the network outputs reproducable during runs by initializing weights and other network randomizations through a seed\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003elearningRate \u003c/td\u003e\n      \u003ctd\u003eFor identifying the network learning rate\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eiterations \u003c/td\u003e\n      \u003ctd\u003eFor identifying the number of optimization iterations\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eoptimizationAlgo \u003c/td\u003e\n      \u003ctd\u003eOptimization Algorithm to use for training. Run \u0026lsquo;OptimizationAlgorithm.values().foreach { println }\u0026rsquo; to see different optimization algorithms that you can use.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eupdater \u003c/td\u003e\n      \u003ctd\u003eAlgorithm to be used for updating the parameters\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003e- Configuration of Layers\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eHere we are calling list() to get the \u0026lsquo;ListBuilder\u0026rsquo;. It provides us the necessary api to add layers to the network through the \u0026lsquo;layer(arg1, arg2)\u0026rsquo; function.\u003cbr/\u003e- The first parameter is the index of the position where the layer needs to be added.\u003cbr/\u003e- The second parameter is the type of layer we need to add to the network.\u003c/p\u003e\n\u003cp\u003eTo build and add a layer we use a similar builder pattern as:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eFunction \u003c/th\u003e\n      \u003cth\u003eDetails\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003enIn \u003c/td\u003e\n      \u003ctd\u003eThe number of inputs coming from the previous layer. (In the first layer, it represents the input it is going to take from the input layer)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003enOut \u003c/td\u003e\n      \u003ctd\u003eThe number of outputs it\u0026rsquo;s going to send to the next layer. (For output layer it represents the labels here)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eweightInit \u003c/td\u003e\n      \u003ctd\u003eThe type of weights initialization to use for the layer parameters. Run \u0026lsquo;WeightInit.values().foreach { println }\u0026rsquo; to see different weight initializations that you can use.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eactivation \u003c/td\u003e\n      \u003ctd\u003eThe activation function between layers. Run \u0026lsquo;Activation.values().foreach { println }\u0026rsquo; to see different activations that you can use.\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003e- Pretraining and Backprop Configuration\u003c/strong\u003e\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eFunction \u003c/th\u003e\n      \u003cth\u003eDetails\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003epretrain \u003c/td\u003e\n      \u003ctd\u003eFalse if training from scratch\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003ebackprop \u003c/td\u003e\n      \u003ctd\u003eWhether to backprop or not\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003e- Building a Graph\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFinally, the last build() call builds the configuration for us\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816541_2017675364",
      "id": "20171006-025852_1017122274",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 4:31:22 AM",
      "dateFinished": "Oct 12, 2017 4:31:22 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\n### Reality checking for our MultiLayerConfiguration\nYou can get your network configuration as String, JSON or YAML for reality checking.\nFor JSON we can use the \u0027toJson()\u0027 function",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:41:26 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eReality checking for our MultiLayerConfiguration\u003c/h3\u003e\n\u003cp\u003eYou can get your network configuration as String, JSON or YAML for reality checking.\u003cbr/\u003eFor JSON we can use the \u0026lsquo;toJson()\u0026rsquo; function\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816552_2001131161",
      "id": "20171005-001735_1522259409",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:41:26 AM",
      "dateFinished": "Oct 12, 2017 3:41:26 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "println(multiLayerConf.toJson)",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:42:42 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"dense\" : {\n        \"activationFn\" : {\n          \"ReLU\" : { }\n        },\n        \"adamMeanDecay\" : \"NaN\",\n        \"adamVarDecay\" : \"NaN\",\n        \"biasInit\" : 0.0,\n        \"biasLearningRate\" : 0.1,\n        \"dist\" : null,\n        \"dropOut\" : 0.0,\n        \"epsilon\" : \"NaN\",\n        \"gradientNormalization\" : \"None\",\n        \"gradientNormalizationThreshold\" : 1.0,\n        \"iupdater\" : {\n          \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n          \"learningRate\" : 0.1,\n          \"momentum\" : 0.9\n        },\n        \"l1\" : 0.0,\n        \"l1Bias\" : 0.0,\n        \"l2\" : 0.0,\n        \"l2Bias\" : 0.0,\n        \"layerName\" : \"layer0\",\n        \"learningRate\" : 0.1,\n        \"learningRateSchedule\" : null,\n        \"momentum\" : 0.9,\n        \"momentumSchedule\" : { },\n        \"nin\" : 784,\n        \"nout\" : 100,\n        \"rho\" : \"NaN\",\n        \"rmsDecay\" : \"NaN\",\n        \"updater\" : \"NESTEROVS\",\n        \"weightInit\" : \"XAVIER\"\n      }\n    },\n    \"leakyreluAlpha\" : 0.0,\n    \"learningRateByParam\" : { },\n    \"learningRatePolicy\" : \"None\",\n    \"lrPolicyDecayRate\" : \"NaN\",\n    \"lrPolicyPower\" : \"NaN\",\n    \"lrPolicySteps\" : \"NaN\",\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"numIterations\" : 1,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 123,\n    \"stepFunction\" : null,\n    \"useDropConnect\" : false,\n    \"useRegularization\" : false,\n    \"variables\" : [ ]\n  }, {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"output\" : {\n        \"activationFn\" : {\n          \"Sigmoid\" : { }\n        },\n        \"adamMeanDecay\" : \"NaN\",\n        \"adamVarDecay\" : \"NaN\",\n        \"biasInit\" : 0.0,\n        \"biasLearningRate\" : 0.1,\n        \"dist\" : null,\n        \"dropOut\" : 0.0,\n        \"epsilon\" : \"NaN\",\n        \"gradientNormalization\" : \"None\",\n        \"gradientNormalizationThreshold\" : 1.0,\n        \"iupdater\" : {\n          \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n          \"learningRate\" : 0.1,\n          \"momentum\" : 0.9\n        },\n        \"l1\" : 0.0,\n        \"l1Bias\" : 0.0,\n        \"l2\" : 0.0,\n        \"l2Bias\" : 0.0,\n        \"layerName\" : \"layer1\",\n        \"learningRate\" : 0.1,\n        \"learningRateSchedule\" : null,\n        \"lossFn\" : {\n          \"MCXENT\" : {\n            \"softmaxClipEps\" : 1.0E-10\n          }\n        },\n        \"lossFunction\" : \"MCXENT\",\n        \"momentum\" : 0.9,\n        \"momentumSchedule\" : { },\n        \"nin\" : 100,\n        \"nout\" : 10,\n        \"rho\" : \"NaN\",\n        \"rmsDecay\" : \"NaN\",\n        \"updater\" : \"NESTEROVS\",\n        \"weightInit\" : \"XAVIER\"\n      }\n    },\n    \"leakyreluAlpha\" : 0.0,\n    \"learningRateByParam\" : { },\n    \"learningRatePolicy\" : \"None\",\n    \"lrPolicyDecayRate\" : \"NaN\",\n    \"lrPolicyPower\" : \"NaN\",\n    \"lrPolicySteps\" : \"NaN\",\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"numIterations\" : 1,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 123,\n    \"stepFunction\" : null,\n    \"useDropConnect\" : false,\n    \"useRegularization\" : false,\n    \"variables\" : [ ]\n  } ],\n  \"inferenceWorkspaceMode\" : \"SEPARATE\",\n  \"inputPreProcessors\" : { },\n  \"iterationCount\" : 0,\n  \"pretrain\" : false,\n  \"tbpttBackLength\" : 20,\n  \"tbpttFwdLength\" : 20,\n  \"trainingWorkspaceMode\" : \"NONE\"\n}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816553_2000746413",
      "id": "20171006-032859_1092583294",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:53:34 PM",
      "dateFinished": "Oct 8, 2017 3:53:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\n### Creating a MultiLayerNetwork\n\nFinally, to create a \u0027MultiLayerNetwork\u0027, we pass the configuration to it as shown below",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:42:02 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eCreating a MultiLayerNetwork\u003c/h3\u003e\n\u003cp\u003eFinally, to create a \u0026lsquo;MultiLayerNetwork\u0026rsquo;, we pass the configuration to it as shown below\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816553_2000746413",
      "id": "20171006-033536_821667427",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:42:02 AM",
      "dateFinished": "Oct 12, 2017 3:42:02 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val multiLayerNetwork : MultiLayerNetwork \u003d new MultiLayerNetwork(multiLayerConf)",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:51:51 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "multiLayerNetwork: org.deeplearning4j.nn.multilayer.MultiLayerNetwork \u003d org.deeplearning4j.nn.multilayer.MultiLayerNetwork@78c696c2\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816553_2000746413",
      "id": "20171006-033602_2145744030",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:53:41 PM",
      "dateFinished": "Oct 8, 2017 3:53:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Building a ComputationGraphConfiguration",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:43:24 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eBuilding a ComputationGraphConfiguration\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779796533_-814119548",
      "id": "20171012-034316_76709280",
      "dateCreated": "Oct 12, 2017 3:43:16 AM",
      "dateStarted": "Oct 12, 2017 3:43:24 AM",
      "dateFinished": "Oct 12, 2017 3:43:24 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "val computationGraphConf : ComputationGraphConfiguration \u003d new NeuralNetConfiguration.Builder()\r\n      .seed(123).learningRate(0.1).iterations(1).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new Nesterovs(0.9)) //High Level Configuration\r\n      .graphBuilder()  //For configuring ComputationGraph we call the graphBuilder method\r\n      .addInputs(\"input\") //Configuring Layers\r\n      .addLayer(\"L1\", new DenseLayer.Builder().nIn(3).nOut(4).build(), \"input\")\r\n      .addLayer(\"out1\", new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nIn(4).nOut(3).build(), \"L1\")\r\n      .addLayer(\"out2\", new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MSE).nIn(4).nOut(2).build(), \"L1\")\r\n      .setOutputs(\"out1\",\"out2\")\r\n      .pretrain(false).backprop(true) //Pretraining and Backprop Configuration\r\n      .build() //Building configuration",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:43:15 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "computationGraphConf: org.deeplearning4j.nn.conf.ComputationGraphConfiguration \u003d\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"defaultConfiguration\" : {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : null,\n    \"leakyreluAlpha\" : 0.0,\n    \"learningRateByParam\" : { },\n    \"learningRatePolicy\" : \"None\",\n    \"lrPolicyDecayRate\" : \"NaN\",\n    \"lrPolicyPower\" : \"NaN\",\n    \"lrPolicySteps\" : \"NaN\",\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"numIterations\" : 1,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 123,\n    \"stepFunction\" : null,\n    \"useDropConnect\" : false,\n    \"useRegularization\" : false,\n    \"v..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816553_2000746413",
      "id": "20171005-001910_831598009",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:53:44 PM",
      "dateFinished": "Oct 8, 2017 3:53:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n### What we did here?",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:43:45 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWhat we did here?\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779818499_922883818",
      "id": "20171012-034338_58021617",
      "dateCreated": "Oct 12, 2017 3:43:38 AM",
      "dateStarted": "Oct 12, 2017 3:43:45 AM",
      "dateFinished": "Oct 12, 2017 3:43:45 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\nThe only difference here is the way we are building layers.\nInstead of calling the \u0027list()\u0027 function, we call the \u0027graphBuilder()\u0027 to get a \u0027GraphBuilder\u0027 for building our \u0027ComputationGraphConfiguration\u0027\nFollowing table explains what each function of a \u0027GraphBuilder\u0027 does\n\n---\n\nFunction         | Details\n---------------- | -------------\naddInputs        | A list of strings telling the network what layers to use as input layers\naddLayer         | First parameter is the layer name, then the layer object and finally a list of strings defined previously to feed this layer as inputs\nsetOutputs       | A list of strings telling the network what layers to use as output layers\n\n---\n\nThe output layers defined here use another function \u0027lossFunction\u0027 to define what loss function to use. \nUse LossFunctions.LossFunction.values().foreach { println } to see what loss functions are available.",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:43:51 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe only difference here is the way we are building layers.\u003cbr/\u003eInstead of calling the \u0026lsquo;list()\u0026rsquo; function, we call the \u0026lsquo;graphBuilder()\u0026rsquo; to get a \u0026lsquo;GraphBuilder\u0026rsquo; for building our \u0026lsquo;ComputationGraphConfiguration\u0026rsquo;\u003cbr/\u003eFollowing table explains what each function of a \u0026lsquo;GraphBuilder\u0026rsquo; does\u003c/p\u003e\n\u003chr/\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eFunction \u003c/th\u003e\n      \u003cth\u003eDetails\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eaddInputs \u003c/td\u003e\n      \u003ctd\u003eA list of strings telling the network what layers to use as input layers\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eaddLayer \u003c/td\u003e\n      \u003ctd\u003eFirst parameter is the layer name, then the layer object and finally a list of strings defined previously to feed this layer as inputs\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003esetOutputs \u003c/td\u003e\n      \u003ctd\u003eA list of strings telling the network what layers to use as output layers\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr/\u003e\n\u003cp\u003eThe output layers defined here use another function \u0026lsquo;lossFunction\u0026rsquo; to define what loss function to use.\u003cbr/\u003eUse LossFunctions.LossFunction.values().foreach { println } to see what loss functions are available.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816553_2000746413",
      "id": "20171005-003455_853806",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:43:51 AM",
      "dateFinished": "Oct 12, 2017 3:43:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\n### Reality checking for our ComputationGraphConfiguration\nYou can get your network configuration as String, JSON or YAML for reality checking.\nFor JSON we can use the \u0027toJson()\u0027 function",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:49:43 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eReality checking for our ComputationGraphConfiguration\u003c/h3\u003e\n\u003cp\u003eYou can get your network configuration as String, JSON or YAML for reality checking.\u003cbr/\u003eFor JSON we can use the \u0026lsquo;toJson()\u0026rsquo; function\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816553_2000746413",
      "id": "20171006-040529_1681699382",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:49:43 AM",
      "dateFinished": "Oct 12, 2017 3:49:43 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "println(computationGraphConf.toJson)",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:43:01 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"defaultConfiguration\" : {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : null,\n    \"leakyreluAlpha\" : 0.0,\n    \"learningRateByParam\" : { },\n    \"learningRatePolicy\" : \"None\",\n    \"lrPolicyDecayRate\" : \"NaN\",\n    \"lrPolicyPower\" : \"NaN\",\n    \"lrPolicySteps\" : \"NaN\",\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"numIterations\" : 1,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 123,\n    \"stepFunction\" : null,\n    \"useDropConnect\" : false,\n    \"useRegularization\" : false,\n    \"variables\" : [ ]\n  },\n  \"inferenceWorkspaceMode\" : \"SEPARATE\",\n  \"iterationCount\" : 0,\n  \"networkInputs\" : [ \"input\" ],\n  \"networkOutputs\" : [ \"out1\", \"out2\" ],\n  \"pretrain\" : false,\n  \"tbpttBackLength\" : 20,\n  \"tbpttFwdLength\" : 20,\n  \"trainingWorkspaceMode\" : \"NONE\",\n  \"vertexInputs\" : {\n    \"L1\" : [ \"input\" ],\n    \"out1\" : [ \"L1\" ],\n    \"out2\" : [ \"L1\" ]\n  },\n  \"vertices\" : {\n    \"L1\" : {\n      \"LayerVertex\" : {\n        \"layerConf\" : {\n          \"cacheMode\" : \"NONE\",\n          \"iterationCount\" : 0,\n          \"l1ByParam\" : { },\n          \"l2ByParam\" : { },\n          \"layer\" : {\n            \"dense\" : {\n              \"activationFn\" : {\n                \"Sigmoid\" : { }\n              },\n              \"adamMeanDecay\" : \"NaN\",\n              \"adamVarDecay\" : \"NaN\",\n              \"biasInit\" : 0.0,\n              \"biasLearningRate\" : 0.1,\n              \"dist\" : null,\n              \"dropOut\" : 0.0,\n              \"epsilon\" : \"NaN\",\n              \"gradientNormalization\" : \"None\",\n              \"gradientNormalizationThreshold\" : 1.0,\n              \"iupdater\" : {\n                \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n                \"learningRate\" : 0.1,\n                \"momentum\" : 0.9\n              },\n              \"l1\" : 0.0,\n              \"l1Bias\" : 0.0,\n              \"l2\" : 0.0,\n              \"l2Bias\" : 0.0,\n              \"layerName\" : \"L1\",\n              \"learningRate\" : 0.1,\n              \"learningRateSchedule\" : null,\n              \"momentum\" : 0.9,\n              \"momentumSchedule\" : { },\n              \"nin\" : 3,\n              \"nout\" : 4,\n              \"rho\" : \"NaN\",\n              \"rmsDecay\" : \"NaN\",\n              \"updater\" : \"NESTEROVS\",\n              \"weightInit\" : \"XAVIER\"\n            }\n          },\n          \"leakyreluAlpha\" : 0.0,\n          \"learningRateByParam\" : { },\n          \"learningRatePolicy\" : \"None\",\n          \"lrPolicyDecayRate\" : \"NaN\",\n          \"lrPolicyPower\" : \"NaN\",\n          \"lrPolicySteps\" : \"NaN\",\n          \"maxNumLineSearchIterations\" : 5,\n          \"miniBatch\" : true,\n          \"minimize\" : true,\n          \"numIterations\" : 1,\n          \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n          \"pretrain\" : false,\n          \"seed\" : 123,\n          \"stepFunction\" : null,\n          \"useDropConnect\" : false,\n          \"useRegularization\" : false,\n          \"variables\" : [ ]\n        },\n        \"outputVertex\" : false,\n        \"preProcessor\" : null\n      }\n    },\n    \"out1\" : {\n      \"LayerVertex\" : {\n        \"layerConf\" : {\n          \"cacheMode\" : \"NONE\",\n          \"iterationCount\" : 0,\n          \"l1ByParam\" : { },\n          \"l2ByParam\" : { },\n          \"layer\" : {\n            \"output\" : {\n              \"activationFn\" : {\n                \"Sigmoid\" : { }\n              },\n              \"adamMeanDecay\" : \"NaN\",\n              \"adamVarDecay\" : \"NaN\",\n              \"biasInit\" : 0.0,\n              \"biasLearningRate\" : 0.1,\n              \"dist\" : null,\n              \"dropOut\" : 0.0,\n              \"epsilon\" : \"NaN\",\n              \"gradientNormalization\" : \"None\",\n              \"gradientNormalizationThreshold\" : 1.0,\n              \"iupdater\" : {\n                \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n                \"learningRate\" : 0.1,\n                \"momentum\" : 0.9\n              },\n              \"l1\" : 0.0,\n              \"l1Bias\" : 0.0,\n              \"l2\" : 0.0,\n              \"l2Bias\" : 0.0,\n              \"layerName\" : \"out1\",\n              \"learningRate\" : 0.1,\n              \"learningRateSchedule\" : null,\n              \"lossFn\" : {\n                \"NegativeLogLikelihood\" : {\n                  \"softmaxClipEps\" : 1.0E-10\n                }\n              },\n              \"lossFunction\" : \"NEGATIVELOGLIKELIHOOD\",\n              \"momentum\" : 0.9,\n              \"momentumSchedule\" : { },\n              \"nin\" : 4,\n              \"nout\" : 3,\n              \"rho\" : \"NaN\",\n              \"rmsDecay\" : \"NaN\",\n              \"updater\" : \"NESTEROVS\",\n              \"weightInit\" : \"XAVIER\"\n            }\n          },\n          \"leakyreluAlpha\" : 0.0,\n          \"learningRateByParam\" : { },\n          \"learningRatePolicy\" : \"None\",\n          \"lrPolicyDecayRate\" : \"NaN\",\n          \"lrPolicyPower\" : \"NaN\",\n          \"lrPolicySteps\" : \"NaN\",\n          \"maxNumLineSearchIterations\" : 5,\n          \"miniBatch\" : true,\n          \"minimize\" : true,\n          \"numIterations\" : 1,\n          \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n          \"pretrain\" : false,\n          \"seed\" : 123,\n          \"stepFunction\" : null,\n          \"useDropConnect\" : false,\n          \"useRegularization\" : false,\n          \"variables\" : [ ]\n        },\n        \"outputVertex\" : false,\n        \"preProcessor\" : null\n      }\n    },\n    \"out2\" : {\n      \"LayerVertex\" : {\n        \"layerConf\" : {\n          \"cacheMode\" : \"NONE\",\n          \"iterationCount\" : 0,\n          \"l1ByParam\" : { },\n          \"l2ByParam\" : { },\n          \"layer\" : {\n            \"output\" : {\n              \"activationFn\" : {\n                \"Sigmoid\" : { }\n              },\n              \"adamMeanDecay\" : \"NaN\",\n              \"adamVarDecay\" : \"NaN\",\n              \"biasInit\" : 0.0,\n              \"biasLearningRate\" : 0.1,\n              \"dist\" : null,\n              \"dropOut\" : 0.0,\n              \"epsilon\" : \"NaN\",\n              \"gradientNormalization\" : \"None\",\n              \"gradientNormalizationThreshold\" : 1.0,\n              \"iupdater\" : {\n                \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n                \"learningRate\" : 0.1,\n                \"momentum\" : 0.9\n              },\n              \"l1\" : 0.0,\n              \"l1Bias\" : 0.0,\n              \"l2\" : 0.0,\n              \"l2Bias\" : 0.0,\n              \"layerName\" : \"out2\",\n              \"learningRate\" : 0.1,\n              \"learningRateSchedule\" : null,\n              \"lossFn\" : {\n                \"MSE\" : { }\n              },\n              \"lossFunction\" : \"MSE\",\n              \"momentum\" : 0.9,\n              \"momentumSchedule\" : { },\n              \"nin\" : 4,\n              \"nout\" : 2,\n              \"rho\" : \"NaN\",\n              \"rmsDecay\" : \"NaN\",\n              \"updater\" : \"NESTEROVS\",\n              \"weightInit\" : \"XAVIER\"\n            }\n          },\n          \"leakyreluAlpha\" : 0.0,\n          \"learningRateByParam\" : { },\n          \"learningRatePolicy\" : \"None\",\n          \"lrPolicyDecayRate\" : \"NaN\",\n          \"lrPolicyPower\" : \"NaN\",\n          \"lrPolicySteps\" : \"NaN\",\n          \"maxNumLineSearchIterations\" : 5,\n          \"miniBatch\" : true,\n          \"minimize\" : true,\n          \"numIterations\" : 1,\n          \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n          \"pretrain\" : false,\n          \"seed\" : 123,\n          \"stepFunction\" : null,\n          \"useDropConnect\" : false,\n          \"useRegularization\" : false,\n          \"variables\" : [ ]\n        },\n        \"outputVertex\" : false,\n        \"preProcessor\" : null\n      }\n    }\n  }\n}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816554_2001900659",
      "id": "20171006-040530_601765710",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:42:49 AM",
      "dateFinished": "Oct 12, 2017 3:42:50 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\n### Creating a ComputationGraph\nFinally, to create a \u0027ComputationGraph\u0027, we pass the configuration to it as shown below",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:49:24 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eCreating a ComputationGraph\u003c/h3\u003e\n\u003cp\u003eFinally, to create a \u0026lsquo;ComputationGraph\u0026rsquo;, we pass the configuration to it as shown below\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816554_2001900659",
      "id": "20171006-040532_1698179355",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:49:24 AM",
      "dateFinished": "Oct 12, 2017 3:49:24 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "val computationGraph : ComputationGraph \u003d new ComputationGraph(computationGraphConf)",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:52:15 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "computationGraph: org.deeplearning4j.nn.graph.ComputationGraph \u003d org.deeplearning4j.nn.graph.ComputationGraph@8b18967\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816554_2001900659",
      "id": "20171006-040534_1681194931",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:53:55 PM",
      "dateFinished": "Oct 8, 2017 3:53:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md \n\n### More MultiLayerConfiguration Examples",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:47:23 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eMore MultiLayerConfiguration Examples\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816554_2001900659",
      "id": "20171005-003517_996988439",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:47:23 AM",
      "dateFinished": "Oct 12, 2017 3:47:23 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### 1. Regularization",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:47:36 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e1. Regularization\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507780045051_-1275653475",
      "id": "20171012-034725_1537519624",
      "dateCreated": "Oct 12, 2017 3:47:25 AM",
      "dateStarted": "Oct 12, 2017 3:47:36 AM",
      "dateFinished": "Oct 12, 2017 3:47:36 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "//You can add regularization in the higher level configuration in the network through first allowing regularization through \u0027regularization(true)\u0027 and then chaining it to a regularization algorithm -\u003e \u0027l1()\u0027, l2()\u0027 etc as shown below:\r\nnew NeuralNetConfiguration.Builder().regularization(true).l2(1e-4)",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:47:59 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res4: org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder \u003d NeuralNetConfiguration.Builder(activationFn\u003dsigmoid, weightInit\u003dXAVIER, biasInit\u003d0.0, dist\u003dnull, learningRate\u003d0.1, biasLearningRate\u003dNaN, learningRateSchedule\u003dnull, lrScoreBasedDecay\u003d0.0, l1\u003dNaN, l2\u003d1.0E-4, l1Bias\u003dNaN, l2Bias\u003dNaN, dropOut\u003d0.0, updater\u003dSGD, iUpdater\u003dSgd(learningRate\u003d0.001), momentum\u003dNaN, momentumSchedule\u003dnull, epsilon\u003dNaN, rho\u003dNaN, rmsDecay\u003dNaN, adamMeanDecay\u003dNaN, adamVarDecay\u003dNaN, layer\u003dnull, leakyreluAlpha\u003d0.01, miniBatch\u003dtrue, numIterations\u003d1, maxNumLineSearchIterations\u003d5, seed\u003d1507478039876, useRegularization\u003dtrue, optimizationAlgo\u003dSTOCHASTIC_GRADIENT_DESCENT, stepFunction\u003dnull, useDropConnect\u003dfalse, minimize\u003dtrue, gradientNormalization\u003dNone, gradientNormalizationThreshold\u003d1.0, learningRatePolicy\u003dNone, ..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816555_2001515910",
      "id": "20171005-003629_722905215",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:53:59 PM",
      "dateFinished": "Oct 8, 2017 3:53:59 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### 2. Dropout connects",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:47:48 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2. Dropout connects\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507780062647_741230907",
      "id": "20171012-034742_934801339",
      "dateCreated": "Oct 12, 2017 3:47:42 AM",
      "dateStarted": "Oct 12, 2017 3:47:48 AM",
      "dateFinished": "Oct 12, 2017 3:47:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "//When creating layers, you can add a dropout connection by using \u0027dropout(\u003cdropOut_factor\u003e)\u0027\r\nnew NeuralNetConfiguration.Builder()\r\n    .list() \r\n    .layer(0, new DenseLayer.Builder().dropOut(0.8).build())",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:48:02 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res6: org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder \u003d MultiLayerConfiguration.Builder(confs\u003d[], dampingFactor\u003d100.0, inputPreProcessors\u003d{}, pretrain\u003dfalse, backprop\u003dtrue, backpropType\u003dStandard, tbpttFwdLength\u003d20, tbpttBackLength\u003d20, inputType\u003dnull, trainingWorkspaceMode\u003dNONE, inferenceWorkspaceMode\u003dSEPARATE, cacheMode\u003dNONE)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816555_2001515910",
      "id": "20171005-003645_1033200218",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:54:02 PM",
      "dateFinished": "Oct 8, 2017 3:54:03 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n\n### 3. Bias initialization",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:48:42 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e3. Bias initialization\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507780110812_-1721669396",
      "id": "20171012-034830_527315303",
      "dateCreated": "Oct 12, 2017 3:48:30 AM",
      "dateStarted": "Oct 12, 2017 3:48:42 AM",
      "dateFinished": "Oct 12, 2017 3:48:42 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "//You can initialize the bias of a particular layer by using \u0027biasInit(\u003cinit_value\u003e)\u0027\nnew NeuralNetConfiguration.Builder()\n    .list() \n    .layer(0, new DenseLayer.Builder().biasInit(0).build())",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:48:35 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res8: org.deeplearning4j.nn.conf.NeuralNetConfiguration.ListBuilder \u003d MultiLayerConfiguration.Builder(confs\u003d[], dampingFactor\u003d100.0, inputPreProcessors\u003d{}, pretrain\u003dfalse, backprop\u003dtrue, backpropType\u003dStandard, tbpttFwdLength\u003d20, tbpttBackLength\u003d20, inputType\u003dnull, trainingWorkspaceMode\u003dNONE, inferenceWorkspaceMode\u003dSEPARATE, cacheMode\u003dNONE)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816555_2001515910",
      "id": "20171005-003647_1870614088",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:54:04 PM",
      "dateFinished": "Oct 8, 2017 3:54:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\n\n### More ComputationGraphConfiguration Examples",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:45:36 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eMore ComputationGraphConfiguration Examples\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816555_2001515910",
      "id": "20171005-003710_2016728915",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:45:33 AM",
      "dateFinished": "Oct 12, 2017 3:45:34 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 1. Recurrent Network with Skip Connections",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:45:55 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e1. Recurrent Network with Skip Connections\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779938993_1983600430",
      "id": "20171012-034538_1971807661",
      "dateCreated": "Oct 12, 2017 3:45:38 AM",
      "dateStarted": "Oct 12, 2017 3:45:55 AM",
      "dateFinished": "Oct 12, 2017 3:45:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "val cgConf1 : ComputationGraphConfiguration \u003d new NeuralNetConfiguration.Builder()\r\n        .learningRate(0.01)\r\n        .graphBuilder()\r\n        .addInputs(\"input\") //can use any label for this\r\n        .addLayer(\"L1\", new GravesLSTM.Builder().nIn(5).nOut(5).build(), \"input\")\r\n        .addLayer(\"L2\",new RnnOutputLayer.Builder().nIn(5+5).nOut(5).build(), \"input\", \"L1\")\r\n        .setOutputs(\"L2\")\r\n        .build();",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:48:07 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 334.0,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "cgConf1: org.deeplearning4j.nn.conf.ComputationGraphConfiguration \u003d\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"defaultConfiguration\" : {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : null,\n    \"leakyreluAlpha\" : 0.0,\n    \"learningRateByParam\" : { },\n    \"learningRatePolicy\" : \"None\",\n    \"lrPolicyDecayRate\" : \"NaN\",\n    \"lrPolicyPower\" : \"NaN\",\n    \"lrPolicySteps\" : \"NaN\",\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"numIterations\" : 1,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 1507478049593,\n    \"stepFunction\" : null,\n    \"useDropConnect\" : false,\n    \"useRegularization\" : false,\n    \"vari..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816555_2001515910",
      "id": "20171005-003820_61703775",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:54:09 PM",
      "dateFinished": "Oct 8, 2017 3:54:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2. Multiple Inputs and Merge Vertex",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:48:11 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2. Multiple Inputs and Merge Vertex\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779959176_1849723137",
      "id": "20171012-034559_1684008513",
      "dateCreated": "Oct 12, 2017 3:45:59 AM",
      "dateStarted": "Oct 12, 2017 3:48:11 AM",
      "dateFinished": "Oct 12, 2017 3:48:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "//Here MergeVertex concatenates the layer outputs\r\nval cgConf2 : ComputationGraphConfiguration \u003d new NeuralNetConfiguration.Builder()\r\n        .learningRate(0.01)\r\n        .graphBuilder()\r\n        .addInputs(\"input1\", \"input2\")\r\n        .addLayer(\"L1\", new DenseLayer.Builder().nIn(3).nOut(4).build(), \"input1\")\r\n        .addLayer(\"L2\", new DenseLayer.Builder().nIn(3).nOut(4).build(), \"input2\")\r\n        .addVertex(\"merge\", new MergeVertex(), \"L1\", \"L2\")\r\n        .addLayer(\"out\", new OutputLayer.Builder().nIn(4+4).nOut(3).build(), \"merge\")\r\n        .setOutputs(\"out\")\r\n        .build();",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:48:14 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 354.0,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "cgConf2: org.deeplearning4j.nn.conf.ComputationGraphConfiguration \u003d\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"defaultConfiguration\" : {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : null,\n    \"leakyreluAlpha\" : 0.0,\n    \"learningRateByParam\" : { },\n    \"learningRatePolicy\" : \"None\",\n    \"lrPolicyDecayRate\" : \"NaN\",\n    \"lrPolicyPower\" : \"NaN\",\n    \"lrPolicySteps\" : \"NaN\",\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"numIterations\" : 1,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 1507478051557,\n    \"stepFunction\" : null,\n    \"useDropConnect\" : false,\n    \"useRegularization\" : false,\n    \"vari..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816555_2001515910",
      "id": "20171005-003839_1750323004",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:54:11 PM",
      "dateFinished": "Oct 8, 2017 3:54:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### 3. Multi-Task Learning",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:46:40 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e3. Multi-Task Learning\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779989076_-204405268",
      "id": "20171012-034629_1111232997",
      "dateCreated": "Oct 12, 2017 3:46:29 AM",
      "dateStarted": "Oct 12, 2017 3:46:40 AM",
      "dateFinished": "Oct 12, 2017 3:46:41 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "val cgConf3 : ComputationGraphConfiguration \u003d new NeuralNetConfiguration.Builder()\r\n        .learningRate(0.01)\r\n        .graphBuilder()\r\n        .addInputs(\"input\")\r\n        .addLayer(\"L1\", new DenseLayer.Builder().nIn(3).nOut(4).build(), \"input\")\r\n        .addLayer(\"out1\", new OutputLayer.Builder()\r\n                .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\r\n                .nIn(4).nOut(3).build(), \"L1\")\r\n        .addLayer(\"out2\", new OutputLayer.Builder()\r\n                .lossFunction(LossFunctions.LossFunction.MSE)\r\n                .nIn(4).nOut(2).build(), \"L1\")\r\n        .setOutputs(\"out1\",\"out2\")\r\n        .build();",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:48:16 AM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "cgConf3: org.deeplearning4j.nn.conf.ComputationGraphConfiguration \u003d\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"defaultConfiguration\" : {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : null,\n    \"leakyreluAlpha\" : 0.0,\n    \"learningRateByParam\" : { },\n    \"learningRatePolicy\" : \"None\",\n    \"lrPolicyDecayRate\" : \"NaN\",\n    \"lrPolicyPower\" : \"NaN\",\n    \"lrPolicySteps\" : \"NaN\",\n    \"maxNumLineSearchIterations\" : 5,\n    \"miniBatch\" : true,\n    \"minimize\" : true,\n    \"numIterations\" : 1,\n    \"optimizationAlgo\" : \"STOCHASTIC_GRADIENT_DESCENT\",\n    \"pretrain\" : false,\n    \"seed\" : 1507478053106,\n    \"stepFunction\" : null,\n    \"useDropConnect\" : false,\n    \"useRegularization\" : false,\n    \"vari..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816556_1999592166",
      "id": "20171005-003841_25082385",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 8, 2017 3:54:12 PM",
      "dateFinished": "Oct 8, 2017 3:54:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n\n### What\u0027s next?",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:44:24 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWhat\u0026rsquo;s next?\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507779856663_2052567885",
      "id": "20171012-034416_1495914167",
      "dateCreated": "Oct 12, 2017 3:44:16 AM",
      "dateStarted": "Oct 12, 2017 3:44:24 AM",
      "dateFinished": "Oct 12, 2017 3:44:24 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%md\n\n- See tutorial [here](http://someurl) to learn about different ways to feed training data to a network\n- See tutorial [here](http://someurl) to learn about how to fit a network to a specified configuration and training data\n",
      "user": "anonymous",
      "dateUpdated": "Oct 12, 2017 3:44:25 AM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003eSee tutorial \u003ca href\u003d\"http://someurl\"\u003ehere\u003c/a\u003e to learn about different ways to feed training data to a network\u003c/li\u003e\n  \u003cli\u003eSee tutorial \u003ca href\u003d\"http://someurl\"\u003ehere\u003c/a\u003e to learn about how to fit a network to a specified configuration and training data\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1507477816556_1999592166",
      "id": "20171006-040048_813348401",
      "dateCreated": "Oct 8, 2017 3:50:16 PM",
      "dateStarted": "Oct 12, 2017 3:44:25 AM",
      "dateFinished": "Oct 12, 2017 3:44:25 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1507483249763_1990968688",
      "id": "20171008-172049_618031942",
      "dateCreated": "Oct 8, 2017 5:20:49 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "MultiLayerNetwork and ComputationGraph",
  "id": "2CX1GBVEM",
  "angularObjects": {
    "2CUANH3SE:shared_process": [],
    "2CXHWE3HG:shared_process": [],
    "2CVERWUM3:shared_process": [],
    "2CX7GA4V8:shared_process": [],
    "2CVX9BVCB:shared_process": [],
    "2CUZEA3GT:shared_process": [],
    "2CVPXS2EK:shared_process": [],
    "2CWAVPHQ9:shared_process": [],
    "2CXF1YD4Z:shared_process": [],
    "2CUFH1QVZ:shared_process": [],
    "2CX8NK3TZ:shared_process": [],
    "2CUSR12J2:shared_process": [],
    "2CXA8ZEKP:shared_process": [],
    "2CUVRNDA9:shared_process": [],
    "2CVGHNSHA:shared_process": [],
    "2CUJ4W6TK:shared_process": [],
    "2CUMWQ3B1:shared_process": [],
    "2CWWTB69G:shared_process": [],
    "2CV9BX83K:shared_process": []
  },
  "config": {},
  "info": {}
}