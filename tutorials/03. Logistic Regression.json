{
  "paragraphs": [
    {
      "text": "%md\n### Note\n\nView the README.md [here](https://github.com/deeplearning4j/dl4j-examples/tree/overhaul_tutorials/tutorials/README.md) to learn about installing, setting up dependencies and importing notebooks in Zeppelin",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 7:40:15 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eNote\u003c/h3\u003e\n\u003cp\u003eView the README.md \u003ca href\u003d\"https://github.com/deeplearning4j/dl4j-examples/tree/overhaul_tutorials/tutorials/README.md\"\u003ehere\u003c/a\u003e to learn about installing, setting up dependencies and importing notebooks in Zeppelin\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508138352160_1716278331",
      "id": "20171016-071912_685216800",
      "dateCreated": "Oct 16, 2017 7:19:12 AM",
      "dateStarted": "Oct 16, 2017 7:40:15 AM",
      "dateFinished": "Oct 16, 2017 7:40:15 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.dep\n\n// clean up any previously loaded dependencies\nz.reset()\n\n// now load ND4J for CPU, our native tensor computing library\nz.load(\"org.nd4j:nd4j-native-platform:0.9.1\")\n\n// alternatively if you have a CUDA-enabled GPU, you can load ND4J for CUDA\n// z.load(\"org.nd4j:nd4j-cuda-8.0-platform:0.9.1\")\n\n// finally, load the core deeplearning4j library with all basic features\nz.load(\"org.deeplearning4j:deeplearning4j-core:0.9.1\")\n\n// don\u0027t forget to type Shift-Enter to run!",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 7:43:28 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res1: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@339beeb3\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508139615598_706905178",
      "id": "20171016-074015_1201598377",
      "dateCreated": "Oct 16, 2017 7:40:15 AM",
      "dateStarted": "Oct 16, 2017 7:43:25 AM",
      "dateFinished": "Oct 16, 2017 7:43:26 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Background\n\nDeep learning is all about designing your network according to the data and its features that you already have - the dataset. So that the network can later train on it to get you the desired outcomes. There are different techniques to model your network and all of them build a relational hierarchy of some form between the inputs and outputs.\n\nIn this tutorial we are going to configure the simplest neural network and that is logistic regression model network. \n\nRegression is simply finding out the relations between the independant variables (inputs) and the dependant variables (outputs). A logistic regression is one in which the dependant variable is categorical - meaning that it can take only a limited number of values. For example, it can either be a cat or a dog, or it can be digits from 0-9.",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:02:05 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eBackground\u003c/h3\u003e\n\u003cp\u003eDeep learning is all about designing your network according to the data and its features that you already have - the dataset. So that the network can later train on it to get you the desired outcomes. There are different techniques to model your network and all of them build a relational hierarchy of some form between the inputs and outputs.\u003c/p\u003e\n\u003cp\u003eIn this tutorial we are going to configure the simplest neural network and that is logistic regression model network. \u003c/p\u003e\n\u003cp\u003eRegression is simply finding out the relations between the independant variables (inputs) and the dependant variables (outputs). A logistic regression is one in which the dependant variable is categorical - meaning that it can take only a limited number of values. For example, it can either be a cat or a dog, or it can be digits from 0-9.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508139793039_-729115635",
      "id": "20171016-074313_1713953229",
      "dateCreated": "Oct 16, 2017 7:43:13 AM",
      "dateStarted": "Oct 16, 2017 8:02:05 AM",
      "dateFinished": "Oct 16, 2017 8:02:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Todo: Include a picture to visually show how a logistic regression looks like graphically with each layer labelled. Also show how weights are biases are linked between layers",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:35:00 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eTodo: Include a picture to visually show how a logistic regression looks like graphically with each layer labelled. Also show how weights are biases are linked between layers\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508142582527_2025484510",
      "id": "20171016-082942_2122221121",
      "dateCreated": "Oct 16, 2017 8:29:42 AM",
      "dateStarted": "Oct 16, 2017 8:35:00 AM",
      "dateFinished": "Oct 16, 2017 8:35:00 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### What are we going to learn in this tutorial?\n\nAs Explained above, we\u0027re going to configure the most simplest network with only one input layer and one output layer to demostrate the concept of logistic regression.",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:02:50 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWhat are we going to learn in this tutorial?\u003c/h3\u003e\n\u003cp\u003eAs Explained above, we\u0026rsquo;re going to configure the most simplest network with only one input layer and one output layer to demostrate the concept of logistic regression.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508139849657_779008108",
      "id": "20171016-074409_2022759097",
      "dateCreated": "Oct 16, 2017 7:44:09 AM",
      "dateStarted": "Oct 16, 2017 8:02:50 AM",
      "dateFinished": "Oct 16, 2017 8:02:50 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Imports",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:02:47 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eImports\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508140957699_-1042820617",
      "id": "20171016-080237_395422951",
      "dateCreated": "Oct 16, 2017 8:02:37 AM",
      "dateStarted": "Oct 16, 2017 8:02:47 AM",
      "dateFinished": "Oct 16, 2017 8:02:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.graph.MergeVertex\nimport org.deeplearning4j.nn.conf.layers.{DenseLayer, GravesLSTM, OutputLayer, RnnOutputLayer}\nimport org.deeplearning4j.nn.conf.{ComputationGraphConfiguration, MultiLayerConfiguration, NeuralNetConfiguration}\nimport org.deeplearning4j.nn.graph.ComputationGraph\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.learning.config.Nesterovs\nimport org.nd4j.linalg.lossfunctions.LossFunctions",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:03:56 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.graph.MergeVertex\nimport org.deeplearning4j.nn.conf.layers.{DenseLayer, GravesLSTM, OutputLayer, RnnOutputLayer}\nimport org.deeplearning4j.nn.conf.{ComputationGraphConfiguration, MultiLayerConfiguration, NeuralNetConfiguration}\nimport org.deeplearning4j.nn.graph.ComputationGraph\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.learning.config.Nesterovs\nimport org.nd4j.linalg.lossfunctions.LossFunctions\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508140975124_-256162358",
      "id": "20171016-080255_207308565",
      "dateCreated": "Oct 16, 2017 8:02:55 AM",
      "dateStarted": "Oct 16, 2017 8:03:24 AM",
      "dateFinished": "Oct 16, 2017 8:03:42 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Configuring our logistic regression layers\n\nWe are going to first build our layers and then feed these layers into our network configuration.",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:28:56 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eConfiguring our logistic regression layers\u003c/h3\u003e\n\u003cp\u003eWe are going to first build our layers and then feed these layers into our network configuration.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508141012475_1706872502",
      "id": "20171016-080332_621979098",
      "dateCreated": "Oct 16, 2017 8:03:32 AM",
      "dateStarted": "Oct 16, 2017 8:28:56 AM",
      "dateFinished": "Oct 16, 2017 8:28:56 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Building the output layer\nval outputLayer : OutputLayer \u003d new OutputLayer.Builder()\n    .nIn(784) //The number of inputs feed from the input layer\n    .nOut(10) //The number of output values the output layer is supposed to take\n    .weightInit(WeightInit.XAVIER) //The algorithm to use for weights initialization\n    .activation(Activation.SOFTMAX) //Softmax activate converts the output layer into a probability distribution\n    .build() //Building our output layer",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:22:54 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "outputLayer: org.deeplearning4j.nn.conf.layers.OutputLayer \u003d OutputLayer(super\u003dBaseOutputLayer(super\u003dFeedForwardLayer(super\u003dBaseLayer(activationFn\u003dsoftmax, weightInit\u003dXAVIER, biasInit\u003dNaN, dist\u003dnull, learningRate\u003dNaN, biasLearningRate\u003dNaN, learningRateSchedule\u003dnull, momentum\u003dNaN, momentumSchedule\u003dnull, l1\u003dNaN, l2\u003dNaN, l1Bias\u003dNaN, l2Bias\u003dNaN, updater\u003dnull, iUpdater\u003dnull, rho\u003dNaN, epsilon\u003dNaN, rmsDecay\u003dNaN, adamMeanDecay\u003dNaN, adamVarDecay\u003dNaN, gradientNormalization\u003dnull, gradientNormalizationThreshold\u003dNaN), nIn\u003d784, nOut\u003d10), lossFn\u003dLossMCXENT()))\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508141215321_208350513",
      "id": "20171016-080655_2014399759",
      "dateCreated": "Oct 16, 2017 8:06:55 AM",
      "dateStarted": "Oct 16, 2017 8:22:47 AM",
      "dateFinished": "Oct 16, 2017 8:22:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Since this is a simple network with a stack of layers we\u0027re going to configure a MultiLayerNetwork\nval logisticRegressionConf : MultiLayerConfiguration \u003d new NeuralNetConfiguration.Builder()\n    .seed(123).learningRate(0.1).iterations(1).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new Nesterovs(0.9)) //High Level Configuration\n    .list() //For configuring MultiLayerNetwork we call the list method\n    .layer(0, outputLayer) //    \u003c----- output layer fed here\n    .pretrain(false).backprop(true) //Pretraining and Backprop Configuration\n    .build() //Building Configuration",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:26:02 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "logisticRegressionConf: org.deeplearning4j.nn.conf.MultiLayerConfiguration \u003d\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"output\" : {\n        \"activationFn\" : {\n          \"Softmax\" : { }\n        },\n        \"adamMeanDecay\" : \"NaN\",\n        \"adamVarDecay\" : \"NaN\",\n        \"biasInit\" : 0.0,\n        \"biasLearningRate\" : 0.1,\n        \"dist\" : null,\n        \"dropOut\" : 0.0,\n        \"epsilon\" : \"NaN\",\n        \"gradientNormalization\" : \"None\",\n        \"gradientNormalizationThreshold\" : 1.0,\n        \"iupdater\" : {\n          \"@class\" : \"org.nd4j.linalg.learning.config.Nesterovs\",\n          \"learningRate\" : 0.1,\n          \"momentu..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508141040558_-487103643",
      "id": "20171016-080400_1846176330",
      "dateCreated": "Oct 16, 2017 8:04:00 AM",
      "dateStarted": "Oct 16, 2017 8:26:00 AM",
      "dateFinished": "Oct 16, 2017 8:26:00 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Todo: Show a picture of how this network configuration looks like graphically (connect weights and biases to the updater etc)",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:35:32 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eTodo: Show a picture of how this network configuration looks like graphically (connect weights and biases to the updater etc)\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508142726246_-909179241",
      "id": "20171016-083206_982462751",
      "dateCreated": "Oct 16, 2017 8:32:06 AM",
      "dateStarted": "Oct 16, 2017 8:35:32 AM",
      "dateFinished": "Oct 16, 2017 8:35:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Why didn\u0027t we build our input layer\n\nYou must be wondering why didn\u0027t we write any kind of code for building our input layer.That\u0027s because the input layer is only a set of inputs values fed into the network. It doesn\u0027t perform any kind of calculation. It\u0027s just an input sequence (raw or pre-processed) coming into the network to be trained on or to be evaluated upon. Later on, we are going to work with data iterators, which are supposed to feed our input to our network in a specific pattern, which can be thought of as an input layer of the network.",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:26:08 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWhy didn\u0026rsquo;t we build our input layer\u003c/h3\u003e\n\u003cp\u003eYou must be wondering why didn\u0026rsquo;t we write any kind of code for building our input layer.That\u0026rsquo;s because the input layer is only a set of inputs values fed into the network. It doesn\u0026rsquo;t perform any kind of calculation. It\u0026rsquo;s just an input sequence (raw or pre-processed) coming into the network to be trained on or to be evaluated upon. Later on, we are going to work with data iterators, which are supposed to feed our input to our network in a specific pattern, which can be thought of as an input layer of the network.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508141702798_1152216709",
      "id": "20171016-081502_1957369762",
      "dateCreated": "Oct 16, 2017 8:15:02 AM",
      "dateStarted": "Oct 16, 2017 8:26:08 AM",
      "dateFinished": "Oct 16, 2017 8:26:08 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n\n### What\u0027s next?",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 7:41:09 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eWhat\u0026rsquo;s next?\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508139636133_349873522",
      "id": "20171016-074036_117973210",
      "dateCreated": "Oct 16, 2017 7:40:36 AM",
      "dateStarted": "Oct 16, 2017 7:41:09 AM",
      "dateFinished": "Oct 16, 2017 7:41:09 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n- See tutorial [here](http://someurl) to learn about configuring a more complex network, namely, a \u0027feedforward neural network\u0027. Here we also introduce the concept of hidden layers.",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 8:26:37 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003eSee tutorial \u003ca href\u003d\"http://someurl\"\u003ehere\u003c/a\u003e to learn about configuring a more complex network, namely, a \u0026lsquo;feedforward neural network\u0026rsquo;. Here we also introduce the concept of hidden layers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1508139669561_556345764",
      "id": "20171016-074109_800628849",
      "dateCreated": "Oct 16, 2017 7:41:09 AM",
      "dateStarted": "Oct 16, 2017 8:26:37 AM",
      "dateFinished": "Oct 16, 2017 8:26:37 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "Oct 16, 2017 7:42:41 AM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1508139761670_-2076152183",
      "id": "20171016-074241_2030295323",
      "dateCreated": "Oct 16, 2017 7:42:41 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "2. Logistic Regression",
  "id": "2CXEUXFBQ",
  "angularObjects": {
    "2CUANH3SE:shared_process": [],
    "2CXHWE3HG:shared_process": [],
    "2CVERWUM3:shared_process": [],
    "2CX7GA4V8:shared_process": [],
    "2CVX9BVCB:shared_process": [],
    "2CUZEA3GT:shared_process": [],
    "2CVPXS2EK:shared_process": [],
    "2CWAVPHQ9:shared_process": [],
    "2CXF1YD4Z:shared_process": [],
    "2CUFH1QVZ:shared_process": [],
    "2CX8NK3TZ:shared_process": [],
    "2CUSR12J2:shared_process": [],
    "2CXA8ZEKP:shared_process": [],
    "2CUVRNDA9:shared_process": [],
    "2CVGHNSHA:shared_process": [],
    "2CUJ4W6TK:shared_process": [],
    "2CUMWQ3B1:shared_process": [],
    "2CWWTB69G:shared_process": [],
    "2CV9BX83K:shared_process": []
  },
  "config": {},
  "info": {}
}